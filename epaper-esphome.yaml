esphome:
  name: wave001
  friendly_name: Wave 001
  
  # Configurazione del comportamento all'avvio del dispositivo
  on_boot:
    priority: 200.0
    then:
      # Attesa che il modulo NTP abbia una data valida
      - wait_until:
          condition:
            lambda: 'return id(ntp).now().is_valid();'
          timeout: 5s
      # Incremento del contatore di risvegli
      - lambda: 'id(contatore_risvegli) += 1;'
      # Attesa per stabilitÃ  dei componenti e aggiornamento ADC
      - delay: 700ms
      - component.update: idADC
      - delay: 600ms
      # Verifica la validitÃ  del sensore durata pagina1
      - wait_until:
          condition:
            lambda: 'return !isnan(id(durata_pagina1_ha).state);'
          timeout: 5s
      - lambda: |-
          // Se durata_pagina1_ha ha un valore valido, usa quello
          if (id(durata_pagina1_ha).state > 0) {
            id(pagina1_durata) = int(id(durata_pagina1_ha).state);  // Imposta la durata da HA se valida
            ESP_LOGI("setup", "âœ… Durata pagina1 presa da Home Assistant: %d sec", id(pagina1_durata));    
          } else {
            id(pagina1_durata) = 30;  // Fallback se non disponibile
          }

      # Pulizia completa al mattino o ogni risveglio
      - if:
          condition:
            lambda: |-
              auto now = id(ntp).now();
              bool mattino = id(primo_risveglio_mattino) && (now.hour >= 7 && now.hour < 9);
              bool ogni_1_risveglio = id(contatore_risvegli) >= 1;
              return mattino || ogni_1_risveglio;
          then:
          # Resetta flag e contatori
          - lambda: |-
              id(contatore_risvegli) = 0;
              id(primo_risveglio_mattino) = false;

      # Attesa che i dati siano aggiornati
      - wait_until:
          condition:
            lambda: 'return id(dati_aggiornati) == true;'
      # Aggiorna il display e marca i dati iniziali come ricevuti      
      - component.update: eink_display      
      - lambda: 'id(dati_iniziali_ricevuti) = true;'
      # Controlla se Ã¨ il momento di dormire o di avviare il ciclo pagina
      - script.execute: check_sleep_time
      - if:
          condition:
            lambda: 'return id(vai_a_dormire);'
          then:
            - logger.log: "ðŸŒ™ Ãˆ ora di dormire â†’ Schermata nera e deep sleep"
            - display.page.show: pagina2
            - component.update: eink_display
            - delay: 700ms
            - deep_sleep.enter: controllo_deep_sleep
          else:
            - script.execute: page_cycle

# Configurazione hardware ESP32
esp32:
  board: esp32dev
  framework:
    type: arduino

# Log di diagnostica
logger:

# Configurazione API per Home Assistant
api:
  encryption:
    key: FcLNoVBys/66Non95HBSch3Xm5Ol5V7716K4rWb6L+Q=

# Configurazione OTA per aggiornamenti firmware
ota:
  - platform: esphome
    password: !secret ota_pwd

# Configurazione Wi-Fi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.119
    gateway: 192.168.1.254
    subnet: 255.255.255.0
  fast_connect: true

  # Access Point di fallback
  ap:
    ssid: "Wave001 Fallback Hotspot"
    password: !secret ap_pwd

  # ModalitÃ  di risparmio energetico
  power_save_mode: light  

# Portale Captive (per connessione diretta)
captive_portal:

# Variabili globali per la gestione dello stato
globals:
  # Stato dei dati aggiornati
  - id: dati_aggiornati
    type: bool
    restore_value: no
    initial_value: 'false'
  # Stato dei dati iniziali ricevuti
  - id: dati_iniziali_ricevuti
    type: bool
    restore_value: no
    initial_value: 'false'
  # Flag per deep sleep  
  - id: vai_a_dormire
    type: bool
    restore_value: no
    initial_value: 'false'
  # Selettore per il cambio pagina   
  - id: selettore_pagina
    type: int
    restore_value: no
    initial_value: '1'
  # Flag per il primo risveglio al mattino        
  - id: primo_risveglio_mattino
    type: bool
    restore_value: no
    initial_value: 'true'
  # Backup durata visualizzazione delle pagine    
  - id: pagina1_durata
    type: int
    restore_value: no
    initial_value: '30'
  # Contatore risvegli per pulizie
  - id: contatore_risvegli
    type: int
    restore_value: yes
    initial_value: '0'

# Pulsanti per spegnere o riavviare
button:
  - platform: shutdown
    name: "Spegni"
  - platform: restart
    name: "Riavvia"

# Script personalizzati
script:
  # Controllo per il deep sleep notturno
  - id: check_sleep_time
    then:
      - lambda: |-
          auto now = id(ntp).now();
          if (now.is_valid()) {
            int total_minutes = now.hour * 60 + now.minute;
            if ((total_minutes >= 1350 && total_minutes <= 1439) || (total_minutes >= 0 && total_minutes < 510)) {
              // Siamo in fascia notte: calcola quanti secondi mancano alle 8:30
              int minutes_to_morning = 510 - total_minutes;
              if (minutes_to_morning <= 0) minutes_to_morning += 1440; // gestisce il passaggio di mezzanotte
              int seconds_to_wakeup = minutes_to_morning * 60;
              ESP_LOGI("main", "ðŸŒ™ Deep sleep notturno fino alle 8:30 (%d secondi)", seconds_to_wakeup);
              id(controllo_deep_sleep).set_sleep_duration(seconds_to_wakeup * 1000);
              id(vai_a_dormire) = true;
            } else {
              id(vai_a_dormire) = false;
            }
          } else {
            id(vai_a_dormire) = false;
          }
  # Gestione del ciclo pagina e deep sleep diurno
  - id: page_cycle
    mode: restart
    then:
      # Mostra la prima pagina e aggiorna il display
      - display.page.show: pagina1
      - component.update: eink_display
      - delay: !lambda 'return id(pagina1_durata) * 1000;'

      # Calcola il tempo per il prossimo slot (00, 20, 40 minuti)
      - lambda: |-
          auto now = id(ntp).now();
          if (now.is_valid()) {
            int current_minutes = now.minute;
            int current_seconds = now.second;
            int slot = ((current_minutes / 20) + 1) * 20; // prossimo slot: 0, 20, 40
            int minutes_to_sleep = slot - current_minutes;
            if (slot == 60) { minutes_to_sleep = 60 - current_minutes; } // gestisce il passaggio d'ora
            int seconds_to_sleep = minutes_to_sleep * 60 - current_seconds;
            if (seconds_to_sleep <= 0) seconds_to_sleep = 60; // fallback minimo
            id(controllo_deep_sleep).set_sleep_duration(seconds_to_sleep * 1000);
          }

      # Entra in deep sleep
      - deep_sleep.enter: controllo_deep_sleep

# Configurazione oraria
time:
  - platform: sntp
    id: ntp
    timezone: Europe/Rome
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org

  - platform: homeassistant
    id: homeassistant_time

# Configurazione deep sleep
deep_sleep:
  id: controllo_deep_sleep
  sleep_duration: 17min

sensor:
  # Durata Pagina1
  - platform: homeassistant
    id: durata_pagina1_ha
    entity_id: input_number.durata_pagina1
    internal: true

  # Sensore ADC
  - platform: adc
    name: ADC
    icon: mdi:flash
    id: idADC
    pin: GPIO32
    attenuation: 12db
    update_interval: 30s
    accuracy_decimals: 3
    internal: true
    filters:
    - sliding_window_moving_average:
        window_size: 10
        send_every: 2

  # Calcolo della tensione reale della batteria
  - platform: copy
    name: Batteria Voltaggio
    icon: mdi:flash
    id: Batteria_Voltaggio
    source_id: idADC
    accuracy_decimals: 2
    filters:
      - multiply: 2  # mantieni se usi partitore 1:2

  # Percentuale della batteria (per 18650 3.7V)
  - platform: copy
    name: Batteria Livello
    icon: mdi:battery
    id: Batteria_Livello
    source_id: Batteria_Voltaggio 
    device_class: battery
    unit_of_measurement: '%'
    accuracy_decimals: 0
    filters:
    - calibrate_linear:
        - 3.00 -> 0
        - 3.30 -> 10
        - 3.50 -> 20
        - 3.60 -> 40
        - 3.70 -> 60
        - 3.80 -> 75
        - 3.90 -> 90
        - 4.00 -> 95
        - 4.10 -> 98
        - 4.20 -> 100
    - lambda: |-
        if (x > 100.0) return 100.0;
        if (x < 0.0) return 0.0;
        return x;

  # Crea un sensore per la gestione dell'ultimo aggiornamento.
  - platform: template
    name: Display Ultimo Aggiornamento
    device_class: timestamp
    entity_category: "diagnostic"
    id: ultimo_aggiornamento_display

  # Sensori da Accuweather
  - platform: homeassistant
    id: meteo_temperatura_ora  
    entity_id: sensor.epaperdisplay_data 
    attribute: meteo_temperatura_ora       
    internal: true
    on_value:
      then:
        - lambda: 'id(dati_aggiornati) = true;' 

  - platform: homeassistant
    id: meteo_umidita_ora
    entity_id: sensor.epaperdisplay_data    
    attribute: meteo_umidita_ora
    unit_of_measurement: "%"
    internal: true

  - platform: homeassistant
    id: meteo_pressione_ora
    entity_id: sensor.epaperdisplay_data    
    attribute: meteo_pressione_ora
    internal: true

  - platform: homeassistant
    id: meteo_precipitazione_ora
    entity_id: sensor.epaperdisplay_data    
    attribute: precipitazione
    internal: true

  - platform: homeassistant    
    id: meteo_temperatura_1d    
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_temperatura_1d    
    internal: true

  - platform: homeassistant    
    id: meteo_temperatura_2d    
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_temperatura_2d    
    internal: true

  - platform: homeassistant    
    id: meteo_temperatura_3d    
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_temperatura_3d    
    internal: true

  - platform: homeassistant    
    id: meteo_temperatura_4d    
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_temperatura_4d    
    internal: true
    
# SENSORI TESTUALI
text_sensor:

  # sun/moon
  - platform: homeassistant
    entity_id: sun.sun
    id: sun
    internal: true

  - platform: homeassistant
    id: meteo_condizione_ora
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_condizione_ora
    internal: true

  - platform: homeassistant    
    id: meteo_condizione_1d
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_condizione_1d
    internal: true

  - platform: homeassistant    
    id: meteo_giorno_1d
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_giorno_1d
    internal: true

  - platform: homeassistant    
    id: meteo_condizione_2d
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_condizione_2d
    internal: true

  - platform: homeassistant    
    id: meteo_giorno_2d
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_giorno_2d
    internal: true

  - platform: homeassistant    
    id: meteo_condizione_3d
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_condizione_3d
    internal: true

  - platform: homeassistant    
    id: meteo_giorno_3d
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_giorno_3d
    internal: true

  - platform: homeassistant    
    id: meteo_condizione_4d
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_condizione_4d
    internal: true

  - platform: homeassistant    
    id: meteo_giorno_4d
    entity_id: sensor.epaperdisplay_data
    attribute: meteo_giorno_4d
    internal: true

  # Text Sensor per Calendario
  # LunedÃ¬
  - platform: homeassistant
    id: evento_1_lunedi
    entity_id: input_text.lunedi_evento_1
  - platform: homeassistant
    id: evento_2_lunedi
    entity_id: input_text.lunedi_evento_2

  # MartedÃ¬
  - platform: homeassistant
    id: evento_1_martedi
    entity_id: input_text.martedi_evento_1
  - platform: homeassistant
    id: evento_2_martedi
    entity_id: input_text.martedi_evento_2

  # MercoledÃ¬
  - platform: homeassistant
    id: evento_1_mercoledi
    entity_id: input_text.mercoledi_evento_1
  - platform: homeassistant
    id: evento_2_mercoledi
    entity_id: input_text.mercoledi_evento_2

  # GiovedÃ¬
  - platform: homeassistant
    id: evento_1_giovedi
    entity_id: input_text.giovedi_evento_1
  - platform: homeassistant
    id: evento_2_giovedi
    entity_id: input_text.giovedi_evento_2

  # VenerdÃ¬
  - platform: homeassistant
    id: evento_1_venerdi
    entity_id: input_text.venerdi_evento_1
  - platform: homeassistant
    id: evento_2_venerdi
    entity_id: input_text.venerdi_evento_2

  # Sabato
  - platform: homeassistant
    id: evento_1_sabato
    entity_id: input_text.sabato_evento_1
  - platform: homeassistant
    id: evento_2_sabato
    entity_id: input_text.sabato_evento_2

  # Domenica
  - platform: homeassistant
    id: evento_1_domenica
    entity_id: input_text.domenica_evento_1
  - platform: homeassistant
    id: evento_2_domenica
    entity_id: input_text.domenica_evento_2

font:
# Solo per la Data
  - file: "fonts/Din-Condensed-Bold.ttf"
    id: xtra_large_font
    size: 110
    glyphs:
      [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', '/']

# Solo per la Temperatura Esterna
  - file: "fonts/Din-Condensed-Bold.ttf"
    id: xtra_large_fontm
    size: 90
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', 'Â°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9']      

# Intestazioni Pagina 1
  - file: "fonts/GoogleSans-Bold.ttf"
    id: medium_fontb
    size: 36
    glyphs: &font-glyphs
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', 'Â°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', '/', 'Ã¬', 'ÃŒ']

# Dati Meteo
  - file: "fonts/GoogleSans-Medium.ttf"
    id: medium_fontm
    size: 40
    glyphs: *font-glyphs
 

  - file: "fonts/GoogleSans-Medium.ttf"
    id: small_font
    size: 26
    glyphs: *font-glyphs


  - file: "fonts/GoogleSans-Medium.ttf"
    id: xtra_small_font
    size: 18
    glyphs: *font-glyphs


    # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: font_icons_small
    size: 26
    glyphs:
      - "\U000F12A6" # battery-charging-high
      - "\U000F0E17" # calendar-month


  - file: "fonts/materialdesignicons-webfont.ttf"
    id: font_icons_medium
    size: 36
    glyphs:
      - "\U000F10C2" # Temperature High
      - "\U000F10C3" # Temperature Low
      - "\U000F1A71" # mdi-snowflake-thermometer
      - "\U000F050F" # mdi-thermometer
      - "\U000F029A" # mdi-gauge
      - "\U000F058E" # mdi-water-percent
      - "\U000F07E4" # mdi-molecule-co2
      - "\U000F059D" # mdi-weather-windy
      - "\U000F04E0" # mdi-sunglasses      
      - "\U000F0E17" # mdi-calendar-month
      - "\U000F054A" # mdi-umbrella      
  
  # Includi Material Design Icons font
  # Grazie a https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 80
    glyphs: &mdi-weather-glyphs
      - "\U000F054A" # mdi-umbrella
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F06CC" # mdi delete-empty
      - "\U000F0A72" # mdi-solar-power
      - "\U000F051F" # mdi-timer-sand

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medium
    size: 60
    glyphs: *mdi-weather-glyphs

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_extra_large
    size: 190
    glyphs: &mdi-loading-glyphs    
      - "\U000F051F" # timer-sand  

# Pins per la Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

# Ora visualizziamo tutto sullo schermo ePaper.
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin:
      number: GPIO25
      inverted: true    
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50in-bV3
    update_interval: never
    rotation: 90Â°

    pages:
      - id: pagina1
        lambda: |-

          // Definizione colori in italiano
          //const auto colore_bianco = COLOR_OFF;
          //const auto colore_nero = COLOR_ON;
          const auto colore_nero = Color(255,255,255);
          const auto colore_bianco = Color(0,0,0);

          // Pulisce lo schermo prima di scrivere
          it.clear();

          // Riempie tutto lo schermo di bianco
          it.filled_rectangle(0, 0, it.get_width(), it.get_height(), colore_bianco);

          // Funzione lambda per tradurre il nome del giorno dall'inglese all'italiano
          auto translate_day = [](const std::string &day) -> std::string {
            if (day == "Monday")    return "LunedÃ¬";
            if (day == "Tuesday")   return "MartedÃ¬";
            if (day == "Wednesday") return "MercoledÃ¬";
            if (day == "Thursday")  return "GiovedÃ¬";
            if (day == "Friday")    return "VenerdÃ¬";
            if (day == "Saturday")  return "Sabato";
            if (day == "Sunday")    return "Domenica";
            return day;
          };

          // Ottiene il giorno attuale in italiano
          char day_buffer[20];
          auto time_now = id(ntp).now();
          strftime(day_buffer, sizeof(day_buffer), "%A", localtime(&time_now.timestamp));
          std::string day_it = translate_day(day_buffer);

          // Definizione delle costanti per il layout e le posizioni
          #define xres 480 
          #define yres 800
          #define x_pad 10
          #define y_pad 20
          #define y_blocco_meteo 130
          #define y_blocco_previsioni 325
          #define y_blocco_calendario 490
          #define weather_icon_x xres/4-x_pad
          #define y_data 18

          // Mappa delle icone meteo: associa condizione a icona Unicode
          std::map<std::string, std::string> weather_icon_map {
            {"clear",                   "\U000F0599"}, 
            {"cloudy",                  "\U000F0590"}, 
            {"cloudy-alert",            "\U000F0F2F"},
            {"cloudy-arrow-right",      "\U000F0E6E"}, 
            {"fog",                     "\U000F0591"}, 
            {"hail",                    "\U000F0592"},
            {"hazy",                    "\U000F0F30"}, 
            {"hurricane",               "\U000F0898"}, 
            {"lightning",               "\U000F0593"},
            {"lightning-rainy",         "\U000F067E"}, 
            {"clear-night",             "\U000F0594"}, 
            {"night",                   "\U000F0594"},
            {"night-partly-cloudy",     "\U000F0F31"}, 
            {"partlycloudy",            "\U000F0595"},
            {"partly-lightning",        "\U000F0F32"}, 
            {"partly-rainy",            "\U000F0F33"},
            {"partlycloudy-light-rain", "\U000F0F33"}, 
            {"partly-snowy",            "\U000F0F34"},
            {"partly-snowy-rainy",      "\U000F0F35"}, 
            {"pouring",                 "\U000F0596"},
            {"rainy",                   "\U000F0597"}, 
            {"snowy",                   "\U000F0598"}, 
            {"snowy-heavy",             "\U000F0F36"},
            {"snowy-rainy",             "\U000F067F"}, 
            {"sunny",                   "\U000F0599"}, 
            {"sunny-alert",             "\U000F0F37"},
            {"sunny-off",               "\U000F14E4"}, 
            {"sunset",                  "\U000F059A"}, 
            {"sunset-down",             "\U000F059B"},
            {"sunset-up",               "\U000F059C"}, 
            {"tornado",                 "\U000F0F38"}, 
            {"windy",                   "\U000F059D"},
            {"windy-variant",           "\U000F059E"},
            {"umbrella",                "\U000F054A"},
          };

          // Se i dati meteo non sono disponibili, mostra un'icona di caricamento
          if (isnan(id(meteo_temperatura_ora).state)) {
            it.printf(240, 260, id(font_mdi_extra_large), TextAlign::TOP_CENTER, "\U000F051F");
            it.printf(240, 500, id(small_font), TextAlign::TOP_CENTER, "Caricamento dati....");
          } else {

            // ======= SEZIONE DATA =======
            const int data_center_x = x_pad + 230;
            const int data_top_y = y_data - 15;
            const int rect_width = 470;
            const int rect_height = 90;

            // - Mostra la data centrata nella parte alta -
            it.printf(data_center_x, data_top_y + rect_height/2, id(xtra_large_font), colore_nero, TextAlign::CENTER, "%02d/%02d/%04d",
              id(ntp).now().day_of_month, id(ntp).now().month, id(ntp).now().year);

            // ======= SEZIONE METEO =======
            // Titolo "METEO" e linea di separazione
            it.printf(xres / 2, y_blocco_meteo, id(medium_fontb), colore_nero, TextAlign::BASELINE_CENTER, "METEO");

            // Linea a sinistra del testo (fino a 10px prima del testo stimato largo 100px)
            it.line(x_pad, y_blocco_meteo - 10, xres / 2 - 100 / 2 - 30, y_blocco_meteo - 10);

            // Linea a destra del testo (da 10px dopo il testo fino a margine destro)
            it.line(xres / 2 + 100 / 2 + 30, y_blocco_meteo - 10, xres - x_pad, y_blocco_meteo - 10);

            // - Batteria -
            it.printf(xres-x_pad-50, y_blocco_meteo-15, id(font_icons_small),  colore_nero, TextAlign::BASELINE_RIGHT, "\U000F12A6");
            it.printf(xres-x_pad, y_blocco_meteo-15,    id(xtra_small_font),   colore_nero, TextAlign::BASELINE_RIGHT, "%2.0f%%", id(Batteria_Livello).state);

            // - Temperatura Esterna -
            it.printf(xres-x_pad, y_blocco_meteo+65,    id(xtra_large_fontm),  colore_nero, TextAlign::BASELINE_RIGHT, "%2.1fÂ°", id(meteo_temperatura_ora).state);

            // - UmiditÃ  Esterna -
            it.printf(x_pad, y_blocco_meteo+50,         id(font_icons_medium), colore_nero, TextAlign::BASELINE_LEFT, "\U000F058E");
            it.printf(x_pad+40, y_blocco_meteo+50,      id(medium_fontm),      colore_nero, TextAlign::BASELINE_LEFT, "%2.0f%%", id(meteo_umidita_ora).state);

            // - Pressione Esterna -
            it.printf(x_pad, y_blocco_meteo+95,         id(font_icons_medium), colore_nero, TextAlign::BASELINE_LEFT, "\U000F029A");
            it.printf(x_pad+40, y_blocco_meteo+95,      id(medium_fontm),      colore_nero, TextAlign::BASELINE_LEFT, "%4.0f hPa", id(meteo_pressione_ora).state); 

            // - Pioggia -
            it.printf(x_pad, y_blocco_meteo+140,        id(font_icons_medium), colore_nero, TextAlign::BASELINE_LEFT, "\U000F054A");
            it.printf(x_pad+40, y_blocco_meteo+140,     id(medium_fontm),      colore_nero, TextAlign::BASELINE_LEFT, "%2.0f mm", id(meteo_precipitazione_ora).state);

            // -Icona Meteo -
            it.printf(xres-x_pad-35, y_blocco_meteo+140,   id(font_mdi_large),    colore_nero, TextAlign::BASELINE_RIGHT, "%s", weather_icon_map[id(meteo_condizione_ora).state.c_str()].c_str());

            // ======= SEZIONE PREVISIONI =======
            // Scritta "PREVISIONI" centrata
            it.printf(xres / 2, y_blocco_previsioni, id(medium_fontb), colore_nero, TextAlign::BASELINE_CENTER, "PREVISIONI");

            // Linea a sinistra (testo â‰ˆ 10 caratteri, stimiamo 200px larghezza)
            it.line(x_pad, y_blocco_previsioni - 10, xres / 2 - 200 / 2 - 30, y_blocco_previsioni - 10);

            // Linea a destra
            it.line(xres / 2 + 200 / 2 + 30, y_blocco_previsioni - 10, xres - x_pad, y_blocco_previsioni - 10);

            // - 1 Giorno -
            it.printf(75, (y_blocco_previsioni+16),   id(xtra_small_font),  colore_nero, TextAlign::TOP_CENTER, translate_day(id(meteo_giorno_1d).state).c_str());          
            it.printf(75, (y_blocco_previsioni+37),   id(font_mdi_medium),  colore_nero, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(meteo_condizione_1d).state.c_str()].c_str());
            it.printf(75, (y_blocco_previsioni+100),  id(xtra_small_font),  colore_nero, TextAlign::TOP_CENTER, "%2.0fÂ°C", id(meteo_temperatura_1d).state);

            // - 2 Giorni -
            it.printf(185, (y_blocco_previsioni+16),  id(xtra_small_font),  colore_nero, TextAlign::TOP_CENTER, translate_day(id(meteo_giorno_2d).state).c_str()); 
            it.printf(185, (y_blocco_previsioni+37),  id(font_mdi_medium),  colore_nero, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(meteo_condizione_2d).state.c_str()].c_str());
            it.printf(185, (y_blocco_previsioni+100), id(xtra_small_font),  colore_nero, TextAlign::TOP_CENTER, "%2.0fÂ°C", id(meteo_temperatura_2d).state);

            // - 3 Giorni -
            it.printf(295, (y_blocco_previsioni+16),  id(xtra_small_font),  colore_nero, TextAlign::TOP_CENTER, translate_day(id(meteo_giorno_3d).state).c_str()); 
            it.printf(295, (y_blocco_previsioni+37),  id(font_mdi_medium),  colore_nero, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(meteo_condizione_3d).state.c_str()].c_str());
            it.printf(295, (y_blocco_previsioni+100), id(xtra_small_font),  colore_nero, TextAlign::TOP_CENTER, "%2.0fÂ°C", id(meteo_temperatura_3d).state);

            // - 4 Giorni -
            it.printf(405, (y_blocco_previsioni+16),  id(xtra_small_font),  colore_nero, TextAlign::TOP_CENTER, translate_day(id(meteo_giorno_4d).state).c_str()); 
            it.printf(405, (y_blocco_previsioni+37),  id(font_mdi_medium),  colore_nero, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(meteo_condizione_4d).state.c_str()].c_str());
            it.printf(405, (y_blocco_previsioni+100), id(xtra_small_font),  colore_nero, TextAlign::TOP_CENTER, "%.0fÂ°C", id(meteo_temperatura_4d).state);
          
            // ======= SEZIONE CALENDARIO =======
            // Scritta "CALENDARIO" centrata
            it.printf(xres / 2, y_blocco_calendario + 4, id(medium_fontb), colore_nero, TextAlign::BASELINE_CENTER, "CALENDARIO");

            // Linea a sinistra (testo â‰ˆ 220px largo)
            it.line(x_pad, y_blocco_calendario - 6, xres / 2 - 220 / 2 - 30, y_blocco_calendario - 6);

            // Linea a destra
            it.line(xres / 2 + 220 / 2 + 30, y_blocco_calendario - 6, xres - x_pad, y_blocco_calendario - 6);

            // - Dimensioni ottimizzate per il layout -
            int y = y_blocco_calendario+14;   // Posizione iniziale verticale
            int block_spacing = 2;      // Spaziatura ridotta tra i blocchi
            int block_height = 82;      // Altezza totale di un blocco giorno
            int day_font_height = 26;   // Altezza del font per il giorno
            int event_font_height = 18; // Altezza del font per gli eventi
            int event_spacing = 4;      // Spaziatura tra eventi

            // Mostra eventi per i prossimi 3 giorni con normalizzazione della data
            struct Giorno {
              const char* nome;
              text_sensor::TextSensor* e1;
              text_sensor::TextSensor* e2;
            };

            std::vector<Giorno> giorni = {
              {"LUNEDÃŒ",    id(evento_1_lunedi),    id(evento_2_lunedi)},
              {"MARTEDÃŒ",   id(evento_1_martedi),   id(evento_2_martedi)},
              {"MERCOLEDÃŒ", id(evento_1_mercoledi), id(evento_2_mercoledi)},
              {"GIOVEDÃŒ",   id(evento_1_giovedi),   id(evento_2_giovedi)},
              {"VENERDÃŒ",   id(evento_1_venerdi),   id(evento_2_venerdi)},
              {"SABATO",    id(evento_1_sabato),    id(evento_2_sabato)},
              {"DOMENICA",  id(evento_1_domenica),  id(evento_2_domenica)},
            };

            // Calcola il giorno corrente e offset per iniziare il ciclo da oggi
            int today = id(homeassistant_time).now().day_of_week;
            int giorni_offset = today - 2;
            if (giorni_offset < 0) giorni_offset += 7;

            auto now = id(homeassistant_time).now();

            for (int i = 0; i < 3; i++) {
              int idx = (giorni_offset + i) % 7;
              auto &g = giorni[idx];

              // Data del giorno
              ESPTime day_date = now;
              day_date.day_of_month += i;

              // Normalizza la data (gestisce cambio mese/anno)
              while (true) {
                int days_in_month = 31;
                if (day_date.month == 4 || day_date.month == 6 || day_date.month == 9 || day_date.month == 11) days_in_month = 30;
                else if (day_date.month == 2) {
                  bool leap = (day_date.year % 4 == 0 && day_date.year % 100 != 0) || (day_date.year % 400 == 0);
                  days_in_month = leap ? 29 : 28;
                }
                if (day_date.day_of_month <= days_in_month) break;
                day_date.day_of_month -= days_in_month;
                day_date.month += 1;
                if (day_date.month > 12) {
                  day_date.month = 1;
                  day_date.year += 1;
                }
              }

              // Intestazione giorno
              it.printf(10, y, id(small_font), colore_nero, TextAlign::TOP_LEFT, "%s %02d-%02d", g.nome, day_date.day_of_month, day_date.month);

              // Linea separatrice orizzontale
              it.line(10, y + day_font_height + 2, xres - x_pad, y + day_font_height + 2, colore_nero);

              // Evento 1
              int event_y = y + day_font_height + event_spacing;
              if (g.e1->has_state() && g.e1->state.length() > 0) {
                it.printf(24, event_y, id(xtra_small_font), colore_nero, TextAlign::TOP_LEFT, g.e1->state.c_str());
                event_y += event_font_height + event_spacing;
              }

              // Evento 2
              if (g.e2->has_state() && g.e2->state.length() > 0) {
                it.printf(24, event_y, id(xtra_small_font), colore_nero, TextAlign::TOP_LEFT, g.e2->state.c_str());
                event_y += event_font_height + event_spacing;
              }

              // Spazio finale per garantire altezza costante anche se mancano eventi
              y += block_height + block_spacing;
            }

            // ====== SEZIONE AGGIORNAMENTO ======
            it.line(x_pad, yres-y_pad-18, xres-x_pad, yres-y_pad-18);           

            it.printf((xres/2), yres-y_pad+6, id(xtra_small_font), TextAlign::BASELINE_CENTER, 
              "Ultimo aggiornamento: %s %02d/%02d/%04d  %02d:%02d", day_it.c_str(), time_now.day_of_month, time_now.month, time_now.year, time_now.hour, time_now.minute);
          }

      - id: pagina2    # nero pieno per reset notturno
        lambda: |-
          //const auto colore_bianco = COLOR_OFF;
          //const auto colore_nero = COLOR_ON;
          const auto colore_nero = Color(255,255,255);
          const auto colore_bianco = Color(0,0,0);

          // Cancella lo schermo        
          it.clear();

          // Riempie tutto lo schermo di nero
          it.filled_rectangle(0, 0, it.get_width(), it.get_height(), colore_nero);

          // Riempie tutto lo schermo di nero
          it.filled_rectangle(0, 0, it.get_width(), it.get_height(), colore_nero);
